{"version":3,"sources":["Todo.js","TodoList.js","Header.jsx","ClearButtons.jsx","App.js","theme.js","index.js"],"names":["Todo","todo","toggleTodo","style","whiteSpace","overflow","width","fontSize","Checkbox","checked","complete","onChange","id","name","TodoList","todos","map","Header","todoHistory","setTodoHistory","setTodos","AppBar","position","Toolbar","Typography","flex","variant","IconButton","onDoubleClick","length","slice","console","log","aria-label","ClearButtons","handleClearDoneTodos","handleClearAllTodos","Grid","item","container","marginTop","Button","backgroundColor","startIcon","LOCAL_STORAGE_KEY","App","useState","nameRef","useRef","useEffect","storedTodos","JSON","parse","localStorage","getItem","setItem","stringify","Paper","minHeight","paddingBottom","direction","xs","sm","display","marginBottom","ref","type","onPaste","navigator","clipboard","readText","then","clipText","current","value","trim","newTodos","includes","split","forEach","prevTodos","uuidv4","addPastedList","color","onClick","eventProperty","find","filter","remainingStr","join","writeText","darkTheme","createMuiTheme","palette","primary","pink","secondary","blue","ReactDOM","render","StrictMode","ThemeProvider","theme","document","getElementById"],"mappings":"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","file":"static/js/main.7817f167.chunk.js","sourcesContent":["import React from 'react'\nimport { Checkbox } from \"@material-ui/core\";\n\nexport default function Todo({ todo, toggleTodo }) {\n    function handleTodoClick() {\n        toggleTodo(todo.id);\n    }\n    \n    return (\n        <div style={{  \n            whiteSpace: \"nowrap\",\n            overflow: \"auto\",\n            width: \"100%\",\n            fontSize: \"20px\"}}>\n            <label>\n                <Checkbox checked={todo.complete} onChange={handleTodoClick} />\n                <span>{todo.name}</span>\n            </label>\n        </div>\n    )\n}","import React from 'react'\nimport Todo from './Todo'\n\nexport default function TodoList({ todos, toggleTodo }) {\n    return (\n        todos.map(todo => {\n            return <Todo key={todo.id} toggleTodo={toggleTodo} todo={todo} />\n        })\n    )\n}","import React from \"react\";\nimport { AppBar, Toolbar, Typography } from \"@material-ui/core\";\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport IconButton from '@material-ui/core/IconButton';\nimport UndoIcon from '@material-ui/icons/Undo';\n\n\n\nconst Header = ({todoHistory, setTodoHistory, setTodos}) => {\n\n    function handleUndo() {\n        //todoHistory is an array of all todos excluding the current.\n        if (todoHistory.length >= 1) {\n            setTodoHistory(todoHistory.slice(0, todoHistory.length - 1));\n            console.log(\"history is greater than 2\");\n            setTodos(todoHistory[todoHistory.length - 1]);\n        }\n        \n    }\n\n    return (\n        // static makes app bar  always be at the top, and prevents other content from being hidden underneath it.\n        // If you do this, give a margin of 0 to html body\n        <AppBar position=\"static\">\n            <Toolbar>\n                <Typography style={{flex: \"1\"}} variant=\"h4\" >To dos</Typography>\n                <IconButton onDoubleClick={handleUndo} aria-label=\"undo\">\n                    <UndoIcon />\n                    <Typography variant=\"body1\">Undo</Typography>\n                </IconButton>\n            </Toolbar>\n        </AppBar>\n    );\n};\n\nexport default Header;","import React from \"react\";\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\nimport { Button, Grid} from \"@material-ui/core\";\n\nfunction ClearButtons({handleClearDoneTodos, handleClearAllTodos}) {\n    return (\n        <Grid item container style={{marginTop: \"2vh\"}} >\n            <Button style={{backgroundColor: \"#696969\"}} variant=\"outlined\" startIcon={<DeleteOutlineIcon />} onDoubleClick={handleClearDoneTodos}>Clear Ticked</Button>\n            <Button style={{backgroundColor: \"#696969\"}} variant=\"outlined\" startIcon={<DeleteIcon />} onDoubleClick={handleClearAllTodos}>Clear All</Button>\n        </Grid>\n    );\n\n\n}\n\nexport default ClearButtons;","// Allow double tap to change item name, if you wanna edit the quantities for example. You click out of the item to save. If you leave the item blank, it is deleted when you click out of it.\n// maintain a history. Each time you paste more than 3 items at a time into the todo list, and each time you delete/remove something, we save the list right before completing that particular action. Keep track of the last 10 of these actions.\n\n\n\nimport React, { useState, useRef, useEffect } from 'react'\nimport './App.css'\nimport TodoList from './TodoList'\nimport {v4 as uuidv4} from 'uuid'\nimport { Button, Typography, Paper, Grid} from \"@material-ui/core\";\nimport Header from \"./Header\";\nimport AddIcon from '@material-ui/icons/Add';\nimport ClearButtons from \"./ClearButtons\"\n\n//aaaaaaaaa\n//this was before i made a proper history\n\nconst LOCAL_STORAGE_KEY = 'todoApp.todos';\n\nfunction App() {\n\n  const [todos, setTodos] = useState([]);\n  const [todoHistory, setTodoHistory] = useState([]);\n  const nameRef = useRef(); //will give us access to input element\n\n  useEffect(() => {\n    const storedTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n    if (storedTodos) {\n      setTodos(storedTodos);\n      // setTodoHistory(storedTodos);\n    }\n  }, [])\n\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos))\n  }, [todos])\n\n  function toggleTodo(id) {\n    const newTodos = [...todos]; //makes a copy of todos\n    const todo = newTodos.find(todo => todo.id === id);\n    todo.complete = !todo.complete;\n    setTodos(newTodos);\n  }\n\n  function handleAddTodo(eventProperty) {\n    setTodoHistory([...todoHistory, todos]);\n    //.current.value is the name of whatever element we are currently referencing\n    const name = nameRef.current.value;\n    if (name === '') return;\n    setTodos(prevTodos => {\n      return [...prevTodos, { id: uuidv4(), name: name, complete: false}]\n    })\n    nameRef.current.value = null;\n  }\n\n  function handleClearDoneTodos() {\n    setTodoHistory([...todoHistory, todos]);\n    console.log(\"the todo history is: \" + todos);\n    const newTodos = todos.filter(todo => !todo.complete);\n    if (todos.length !== newTodos) {\n      setTodos(newTodos);\n    }\n  }\n\n  function handleClearAllTodos() {\n    console.log(\"the todos are: \" + todos);\n    setTodoHistory([...todoHistory, todos]);\n    console.log(\"the todo history is: \" + todos);\n    setTodos([]);\n  }\n\n  //possible alternatives to onPaste:\n  //https://charles-stover.medium.com/manage-your-customers-clipboard-with-react-hooks-18486220d0d1\n  //https://www.npmjs.com/package/react-use-clipboard\n  function handlePaste() {\n    console.log(\"pasted to the input\");\n    //the following does not work with the current version of firefox and safari (I think it's because they need permission to read clipboard) BUT works with Chrome (after it asked for permission and I gave it).\n    navigator.clipboard.readText().then(\n      clipText => {\n        addPastedList(clipText);\n        setTodoHistory([...todoHistory, todos]);\n      });\n  }\n\n  function addPastedList(clipText) {\n    nameRef.current.value = null;\n    if (clipText.trim() === \"\") {\n      console.log(\"There was nothing to paste\");\n      return;\n    }\n    //.trim() the string first to remove the last \\n which would otherwise produce an empty string (remove .trim and you'll see)\n    let newTodos;\n    if (clipText.trim().includes(\"\\n\")) {\n      console.log(\"is separated by new line\");\n      newTodos = clipText.trim().split(\"\\n\");\n    } else { //it's separated by new lines\n      console.log(\"this one is separated by commas\")\n      newTodos = clipText.trim().split(\",\");\n    }\n    \n    newTodos.forEach( (name) => {\n      setTodos(prevTodos => {\n        return [...prevTodos, { id: uuidv4(), name: name, complete: false}]\n      });\n    });\n  }\n\n  function handleCopyList() {\n    const remainingArray = todos.filter(todo => !todo.complete).map(function(todo) {return todo.name});\n    const remainingStr = remainingArray.join(\"\\n\");\n    console.log(remainingStr);\n    navigator.clipboard.writeText(remainingStr).then(function() {\n      console.log(\"successfully copied\");\n    }, function() {\n      console.log(\"could not copy\");\n    });\n  }\n\n  return (\n    <Paper style={{minHeight: \"100vh\", paddingBottom: \"100px\"}}>\n    <Grid container direction=\"column\">\n      <Grid item>\n        <Header todoHistory={todoHistory} setTodoHistory={setTodoHistory} setTodos={setTodos} />\n      </Grid>\n      <Grid item container>\n        <Grid item xs={1} sm={2} />\n        <Grid item xs={10} sm={8}>\n          <div style={{display: \"flex\", marginTop: \"5vh\", marginBottom: \"5vh\"}}>\n            <input style={{width: \"65%\", fontSize: \"22px\"}} ref={nameRef} type=\"text\" onPaste={handlePaste} />\n            <Button  style={{width: \"35%\"}} variant=\"contained\" color=\"secondary\"  startIcon={<AddIcon />} onClick={handleAddTodo}>Add Todo</Button>\n          </div>\n          \n          <TodoList todos={todos} toggleTodo={toggleTodo}/>\n          <div style={{marginBottom: \"1vh\", marginTop: \"2vh\"}}><Typography>{todos.filter(todo => !todo.complete).length} remaining</Typography></div>   \n          <Button style={{backgroundColor: \"#696969\"}} variant=\"outlined\" onClick={handleCopyList}>Copy Remaining</Button>\n\n{/* in the options, you can clear all and clear complete items */}\n          <ClearButtons handleClearAllTodos={handleClearAllTodos} handleClearDoneTodos={handleClearDoneTodos} />\n              \n        </Grid>\n        <Grid item xs={1} sm={2} />\n\n      \n      {/* xs={false} is the same as xs={0}, and it means on xtra small screens and up, we take up 0 of the 12 spaces. sm={2} means on small screens and up, we take up 2 of the 12 spaces */}\n        {/* <Grid item xs={false} sm={2} />\n        <Grid item xs={12} sm={8}>\n          <Content />\n        </Grid>\n        <Grid item xs={false} sm={2} />  */}\n      </Grid>\n    </Grid>\n    </Paper>\n    );\n    \n}\n\nexport default App;\n","import { createMuiTheme } from '@material-ui/core/styles';\nimport blue from '@material-ui/core/colors/blue';\nimport pink from '@material-ui/core/colors/pink';\n\nconst darkTheme = createMuiTheme({\n  palette: {\n    type: 'dark',\n    primary: pink,\n    secondary: blue,\n  },\n});\n\nexport default darkTheme;\n\n// const theme = createMuiTheme({\n//   palette: {\n//     primary: {\n//       main: purple[500],\n//     },\n//     secondary: {\n//       main: green[500],\n//     },\n//   },\n// });\n\n// export default theme;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport darkTheme from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={darkTheme}>\n      <App />\n    </ThemeProvider>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}